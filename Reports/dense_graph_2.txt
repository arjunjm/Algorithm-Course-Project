Generating graph with 5000 vertices in which every vertex has an edge to about 20 percent of the other vertices
 Graph generated in 263.85 seconds 

==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 1)
Source Vertex = 2676
Destination Vertex = 4820

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 2676-->1731-->2622-->2712-->1440-->2156-->1490-->1536-->1755-->1388-->489-->1732-->1076-->199-->1465-->1601-->1260-->703-->1764-->851-->1037-->482-->24-->1-->1438-->1204-->1608-->1961-->219-->1613-->20-->13-->1466-->248-->68-->563-->1923-->1715-->1726-->4820

Max Bandwidth Value :: 9978

Running time : 0.76 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 2676-->1731-->2622-->1391-->4671-->3614-->4524-->490-->798-->3175-->3445-->1748-->3754-->1809-->3887-->1770-->2799-->3306-->3089-->3817-->1300-->3680-->434-->3704-->4962-->3749-->1684-->2335-->4206-->1255-->973-->2199-->3738-->3917-->4125-->4943-->4177-->4776-->703-->1764-->851-->1037-->4514-->4545-->1181-->332-->2384-->2215-->1339-->4436-->832-->4629-->38-->4328-->2964-->2059-->1307-->679-->1927-->3110-->672-->3865-->1890-->2994-->52-->2242-->737-->4791-->1112-->2747-->810-->3055-->3441-->3772-->4820

Max Bandwidth Value :: 9978


Running time : 1.37 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 2676-->1731-->4044-->4006-->4915-->2430-->2438-->3196-->3585-->1770-->3887-->1809-->2313-->3975-->3984-->2152-->1781-->2476-->2210-->1530-->1329-->479-->3567-->3181-->4019-->2119-->4795-->4842-->4385-->3285-->1631-->3865-->3034-->2942-->3861-->3645-->4465-->2346-->798-->3424-->970-->3688-->3514-->4559-->2577-->1031-->994-->1163-->2999-->1991-->2853-->2352-->2103-->1359-->4155-->1758-->1822-->1072-->2347-->1501-->4395-->1238-->55-->1-->1438-->1204-->1968-->31-->1870-->4637-->4890-->3488-->3009-->2264-->4596-->2762-->1952-->3451-->2852-->4597-->2759-->4820

Max Bandwidth Value :: 9978


Algorithm Running Time (excluding the time for data structure creation and intialization) : 11.72 seconds
Total Running time : 45.2 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 2)
Source Vertex = 185
Destination Vertex = 3443

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 185-->289-->3910-->3660-->2603-->3540-->3875-->1651-->1983-->1809-->3754-->1748-->3445-->3581-->1433-->546-->1067-->1743-->4664-->1053-->3443

Max Bandwidth Value :: 9987

Running time : 1.2 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 185-->289-->163-->1614-->50-->2565-->4679-->3307-->4004-->1238-->55-->1-->1438-->1204-->1608-->2827-->2605-->212-->2947-->2973-->4433-->546-->1067-->1743-->4664-->1053-->3443

Max Bandwidth Value :: 9987


Running time : 1.52 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 185-->289-->1096-->3044-->4806-->3350-->766-->365-->664-->1069-->1991-->2999-->1163-->994-->1031-->2577-->4559-->3514-->3688-->970-->3424-->798-->2346-->4465-->3645-->3861-->2942-->3034-->3865-->1631-->3285-->4385-->4842-->4795-->2119-->4019-->3181-->3567-->479-->1329-->1530-->2210-->2476-->1781-->2152-->3984-->3975-->2313-->1809-->3754-->1748-->3445-->3581-->1433-->546-->1067-->1743-->4664-->1053-->3443

Max Bandwidth Value :: 9987


Algorithm Running Time (excluding the time for data structure creation and intialization) : 11.89 seconds
Total Running time : 44.72 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 3)
Source Vertex = 135
Destination Vertex = 428

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 135-->1952-->3451-->2852-->3943-->2345-->544-->3345-->3143-->1820-->3905-->375-->2158-->2690-->1264-->2740-->3078-->2992-->3255-->2403-->425-->2260-->852-->579-->2078-->3015-->23-->1677-->3889-->2229-->322-->193-->26-->3270-->590-->3087-->2936-->896-->1365-->2103-->2352-->2853-->1991-->2999-->1163-->994-->1031-->2577-->4559-->3514-->3688-->970-->3424-->798-->2346-->4465-->3645-->3861-->2942-->3034-->27-->2051-->1717-->428

Max Bandwidth Value :: 9974

Running time : 0.76 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 135-->1952-->2762-->4596-->2264-->3009-->3488-->4890-->4637-->1870-->31-->1968-->1204-->1438-->1-->55-->1238-->4395-->1501-->2347-->1072-->1822-->4989-->270-->1225-->1314-->2715-->2051-->1717-->428

Max Bandwidth Value :: 9974


Running time : 1.36 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 135-->1952-->2762-->4596-->2264-->3009-->3488-->4890-->4637-->1870-->31-->1968-->1204-->1438-->1-->55-->1238-->4395-->1501-->3770-->3476-->1847-->1717-->428

Max Bandwidth Value :: 9974


Algorithm Running Time (excluding the time for data structure creation and intialization) : 12.05 seconds
Total Running time : 44.89 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 4)
Source Vertex = 804
Destination Vertex = 4247

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 804-->1794-->2734-->2623-->79-->2680-->2701-->2073-->1571-->1929-->1962-->928-->835-->672-->1958-->1199-->2000-->371-->600-->1698-->2156-->1490-->1536-->1755-->1388-->489-->1732-->1076-->199-->1465-->1601-->26-->897-->216-->2494-->2223-->1576-->2614-->1927-->679-->1307-->320-->148-->375-->141-->1244-->572-->397-->2705-->2420-->3549-->4247

Max Bandwidth Value :: 9980

Running time : 0.8 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 804-->1794-->2734-->4551-->771-->3132-->1638-->985-->2384-->1776-->1503-->3898-->1641-->3860-->379-->2347-->4704-->4307-->2159-->446-->137-->1626-->3471-->3701-->3943-->4929-->3962-->2522-->1336-->4330-->1741-->4878-->2819-->2857-->1919-->3685-->751-->3920-->1702-->572-->397-->2705-->2420-->3549-->4247

Max Bandwidth Value :: 9980


Running time : 1.38998 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 804-->1794-->2508-->2919-->108-->3497-->4764-->3151-->4600-->2042-->3214-->3803-->3984-->2152-->1781-->2476-->2210-->1530-->1329-->479-->3567-->3181-->4019-->2119-->4795-->4842-->4385-->3285-->1631-->3865-->3034-->2942-->3861-->3645-->4465-->2346-->798-->3424-->970-->3688-->3514-->4559-->2577-->1031-->994-->1163-->2999-->1991-->2853-->2352-->2103-->1359-->4155-->1758-->1822-->1072-->2347-->1501-->4395-->1238-->55-->1-->1438-->1204-->1968-->31-->421-->2406-->4870-->3345-->3143-->1820-->3905-->375-->141-->1244-->572-->397-->2705-->2420-->3549-->4247

Max Bandwidth Value :: 9980


Algorithm Running Time (excluding the time for data structure creation and intialization) : 11.72 seconds
Total Running time : 44.18 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 5)
Source Vertex = 4925
Destination Vertex = 224

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 4925-->3351-->3873-->928-->835-->672-->3110-->1368-->1796-->2500-->2034-->2403-->1221-->3008-->2265-->2608-->2827-->1608-->1204-->1438-->1-->55-->2019-->2729-->1862-->224

Max Bandwidth Value :: 9981

Running time : 0.809984 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 4925-->3351-->3873-->144-->1908-->3319-->3803-->3984-->3975-->2313-->2662-->2616-->3526-->2608-->3517-->2815-->3691-->4395-->1238-->55-->2019-->2729-->1862-->224

Max Bandwidth Value :: 9981


Running time : 1.37002 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 4925-->3351-->3873-->691-->2060-->2302-->4127-->3655-->3436-->4522-->1478-->4441-->3182-->3933-->2280-->3101-->2852-->3451-->1952-->2762-->4596-->2264-->3009-->3488-->4890-->4637-->1870-->31-->1968-->1204-->1438-->1-->55-->2019-->2729-->1862-->224

Max Bandwidth Value :: 9981


Algorithm Running Time (excluding the time for data structure creation and intialization) : 11.5 seconds
Total Running time : 43.26 seconds
---------------------------------------------------------------------------


Program done executing..Press any key to quit!
