Generating graph with 5000 vertices in which every vertex has an edge to about 20 percent of the other vertices
 Graph generated in 263.07 seconds 

==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 1)
Source Vertex = 4377
Destination Vertex = 3580

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 4377-->295-->15-->1270-->103-->809-->473-->1093-->181-->29-->13-->2547-->535-->2767-->156-->2063-->3170-->3580

Max Bandwidth Value :: 9982

Running time : 0.9 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 4377-->295-->15-->1270-->2573-->3432-->3068-->3835-->4855-->1714-->3192-->2298-->2536-->595-->3951-->4436-->3652-->4515-->2783-->173-->4803-->305-->1791-->4571-->1732-->3581-->3502-->1481-->2864-->461-->265-->741-->3319-->4934-->1869-->3731-->4380-->3896-->4342-->2641-->284-->2433-->2297-->4885-->1454-->3225-->2699-->2409-->3891-->4842-->4346-->2123-->4020-->4174-->156-->2063-->3170-->3580

Max Bandwidth Value :: 9982


Running time : 1.47 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 4377-->3866-->619-->2605-->149-->4072-->4125-->922-->1192-->1466-->1266-->3489-->4225-->1744-->2319-->2712-->3074-->4830-->3451-->3554-->2078-->4935-->1044-->1232-->2871-->1929-->1698-->452-->2058-->1001-->1432-->2697-->2596-->1362-->1703-->1624-->546-->188-->3502-->3581-->1732-->2027-->3058-->3704-->3170-->3580

Max Bandwidth Value :: 9982


Algorithm Running Time (excluding the time for data structure creation and intialization) : 12.12 seconds
Total Running time : 46.49 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 2)
Source Vertex = 4501
Destination Vertex = 60

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 4501-->2602-->2871-->3218-->1508-->3100-->4958-->4484-->1435-->771-->2559-->4532-->4018-->60

Max Bandwidth Value :: 9987

Running time : 1.17002 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 4501-->2602-->2871-->3218-->1508-->3100-->4958-->4484-->1435-->771-->2559-->4532-->4018-->60

Max Bandwidth Value :: 9987


Running time : 1.46 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 4501-->2602-->2871-->3218-->1508-->3100-->4958-->4484-->1435-->771-->2559-->4532-->4018-->60

Max Bandwidth Value :: 9987


Algorithm Running Time (excluding the time for data structure creation and intialization) : 12.15 seconds
Total Running time : 45.86 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 3)
Source Vertex = 142
Destination Vertex = 4700

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 142-->381-->427-->1059-->2628-->1025-->871-->2532-->1010-->170-->1525-->619-->2605-->149-->4072-->4125-->922-->1192-->1204-->1005-->1736-->365-->2972-->3650-->1144-->2027-->1732-->3581-->3502-->188-->3081-->4516-->4700

Max Bandwidth Value :: 9988

Running time : 1.02998 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 142-->381-->427-->1059-->2628-->1025-->4349-->4806-->4660-->4818-->3217-->4369-->4700

Max Bandwidth Value :: 9988


Running time : 1.49002 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 142-->381-->427-->1059-->2628-->1025-->871-->2532-->1010-->170-->1525-->619-->2605-->149-->4072-->4125-->922-->1192-->1466-->1266-->3489-->4225-->1744-->2319-->2712-->3074-->4830-->3451-->3554-->2078-->4935-->1044-->1232-->2871-->1929-->1698-->452-->2058-->1001-->1432-->2697-->2596-->1362-->1703-->1624-->546-->188-->3081-->4516-->4700

Max Bandwidth Value :: 9988


Algorithm Running Time (excluding the time for data structure creation and intialization) : 12.3 seconds
Total Running time : 46.21 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 4)
Source Vertex = 1119
Destination Vertex = 2746

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 1119-->1408-->3349-->4531-->4527-->1684-->1298-->1879-->277-->1708-->134-->243-->3576-->4674-->3048-->3554-->2078-->4206-->1017-->4394-->38-->463-->3589-->2917-->2256-->2033-->1903-->2320-->2870-->2399-->3414-->3482-->2344-->2679-->1111-->1215-->2746

Max Bandwidth Value :: 9988

Running time : 0.84 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 1119-->1408-->3349-->4531-->4527-->1684-->1298-->1879-->277-->1708-->134-->243-->3576-->4674-->3048-->3554-->2078-->4206-->1017-->4394-->38-->3091-->4622-->2087-->3266-->2459-->2475-->2997-->701-->4457-->3824-->1869-->2679-->1111-->1215-->2746

Max Bandwidth Value :: 9988


Running time : 1.42 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 1119-->1408-->3349-->4531-->4527-->1684-->1298-->1879-->277-->1708-->134-->243-->3576-->4674-->3048-->3554-->2078-->4935-->1044-->1232-->2871-->1929-->1698-->452-->2058-->1001-->1432-->2697-->2596-->1362-->1703-->1624-->546-->188-->3502-->1481-->2864-->461-->265-->741-->3319-->4934-->1869-->2679-->1111-->1215-->2746

Max Bandwidth Value :: 9988


Algorithm Running Time (excluding the time for data structure creation and intialization) : 12.34 seconds
Total Running time : 46.43 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 5)
Source Vertex = 1290
Destination Vertex = 453

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 1290-->2665-->4584-->111-->2440-->2535-->3059-->4662-->3405-->1402-->1043-->1894-->1738-->2149-->2128-->2917-->2256-->2033-->1903-->2320-->1462-->1754-->411-->2967-->3201-->546-->1624-->1703-->1362-->2596-->2697-->1432-->1001-->2021-->3542-->3616-->3286-->2361-->2825-->2055-->3802-->1987-->1494-->3740-->3955-->4253-->1613-->4181-->644-->2258-->2306-->1364-->453

Max Bandwidth Value :: 9989

Running time : 0.8 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 1290-->2665-->4584-->111-->2440-->2535-->3059-->4662-->3405-->443-->4344-->129-->1362-->1703-->1624-->546-->3201-->2967-->411-->1754-->1462-->2712-->107-->459-->4803-->173-->2783-->3563-->4-->3198-->3512-->3807-->3123-->3151-->140-->112-->4043-->4744-->4658-->2333-->2557-->1236-->2187-->1723-->3618-->2885-->1652-->4253-->1613-->4181-->644-->2258-->2306-->1364-->453

Max Bandwidth Value :: 9989


Running time : 1.41002 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 1290-->2665-->4584-->111-->2440-->2535-->3059-->4662-->3405-->443-->4344-->129-->1362-->2596-->2697-->1432-->1001-->2058-->452-->1698-->1929-->2871-->1232-->1044-->4935-->2078-->3554-->3451-->4830-->3074-->2712-->1462-->2320-->1903-->2033-->2256-->2917-->3589-->4212-->1006-->1250-->4208-->928-->3286-->2361-->157-->1138-->1718-->4323-->2110-->1436-->3149-->1723-->3618-->2885-->1652-->4253-->1613-->4181-->644-->2258-->2306-->1364-->453

Max Bandwidth Value :: 9989


Algorithm Running Time (excluding the time for data structure creation and intialization) : 12.38 seconds
Total Running time : 46.84 seconds
---------------------------------------------------------------------------


Program done executing..Press any key to quit!
