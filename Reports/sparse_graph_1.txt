Generating graph with 5000 vertices in which every vertex has degree 6!
Graph generated in 0.01 seconds 

==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 1)
Source Vertex = 784
Destination Vertex = 1026

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 784-->1600-->1058-->556-->1163-->4634-->387-->2920-->1683-->1054-->215-->1068-->4763-->248-->3033-->328-->2265-->873-->1323-->2620-->4612-->2653-->4941-->606-->2063-->3-->576-->3202-->4809-->4661-->4838-->1279-->4108-->491-->969-->1589-->156-->50-->3595-->1282-->89-->926-->4761-->2928-->496-->3546-->844-->4204-->565-->870-->963-->3653-->4861-->3856-->1624-->3188-->2900-->102-->4742-->1026

Max Bandwidth Value :: 7988

Running time : 0.27 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 784-->1600-->1058-->556-->1163-->4634-->387-->2920-->1683-->1054-->215-->1068-->4763-->248-->3033-->328-->2265-->873-->1323-->2620-->4612-->2653-->4941-->606-->2063-->3-->576-->3202-->4809-->4661-->4838-->1279-->4108-->491-->969-->1589-->156-->50-->3595-->1282-->89-->926-->4761-->2928-->496-->3546-->844-->4204-->565-->870-->963-->3653-->4861-->3856-->1624-->3188-->2900-->102-->4742-->1026

Max Bandwidth Value :: 7988


Running time : 0.06 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 784-->1600-->1058-->556-->1163-->4634-->387-->2920-->1683-->1054-->215-->1068-->4763-->248-->3033-->328-->2265-->873-->1323-->2620-->4612-->2653-->4941-->606-->2063-->3-->576-->3202-->4809-->4661-->4838-->1279-->4108-->491-->969-->1589-->156-->50-->3595-->1282-->89-->926-->4761-->2928-->496-->3546-->844-->4204-->565-->870-->963-->3653-->4861-->3856-->1624-->3188-->2900-->102-->4742-->1026

Max Bandwidth Value :: 7988


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.05 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 2)
Source Vertex = 2045
Destination Vertex = 4324

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 2045-->3923-->4055-->4278-->3669-->3604-->252-->3057-->31-->3429-->1182-->1108-->3326-->839-->1952-->1283-->4246-->1314-->3212-->4324

Max Bandwidth Value :: 7603

Running time : 0.3 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 2045-->3923-->4055-->4278-->3669-->3604-->252-->3057-->31-->3429-->1182-->1108-->3326-->839-->1952-->1283-->4246-->1314-->3212-->4324

Max Bandwidth Value :: 7603


Running time : 0.05 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 2045-->3923-->4055-->4278-->3669-->3604-->252-->3057-->31-->3429-->1182-->1108-->3326-->839-->1952-->1283-->4246-->1314-->3212-->4324

Max Bandwidth Value :: 7603


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.05 seconds
Total Running time : 0.15 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 3)
Source Vertex = 4279
Destination Vertex = 2201

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 4279-->373-->850-->904-->4062-->2514-->4239-->4796-->4149-->2829-->2434-->3091-->875-->3798-->3121-->4592-->3835-->1940-->1375-->2773-->3295-->2548-->2742-->13-->3142-->2049-->2881-->2607-->1340-->498-->1404-->2108-->2124-->4595-->4226-->1944-->4350-->996-->2537-->732-->2978-->1565-->4139-->2674-->4034-->559-->3936-->931-->466-->3365-->1673-->3461-->1960-->4731-->4189-->4291-->3688-->2201

Max Bandwidth Value :: 7625

Running time : 0.29 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 4279-->373-->850-->904-->4062-->2514-->4239-->4796-->4149-->2829-->2434-->3091-->875-->3798-->3121-->4592-->3835-->1940-->1375-->1832-->267-->166-->3668-->2686-->4755-->1730-->548-->1584-->2129-->4884-->4887-->2881-->2607-->1340-->498-->1404-->2108-->2124-->4595-->4226-->1944-->4350-->996-->2537-->732-->2978-->1565-->4901-->1845-->2737-->2154-->2556-->3713-->1151-->1043-->3743-->2004-->2165-->786-->4568-->1629-->4437-->4507-->3958-->4915-->4023-->496-->3546-->844-->4204-->565-->870-->963-->3653-->4861-->439-->3504-->4189-->4291-->3688-->2201

Max Bandwidth Value :: 7625


Running time : 0.05 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 4279-->373-->850-->904-->4062-->2514-->4239-->4796-->4149-->2829-->2434-->3091-->875-->3798-->3121-->4592-->3835-->1940-->1375-->1832-->267-->166-->3668-->2686-->4755-->1730-->548-->1584-->2129-->4884-->4887-->2881-->2607-->1340-->498-->1404-->2108-->2124-->4595-->4226-->1944-->4350-->996-->2537-->2114-->4795-->1077-->248-->4763-->1068-->215-->1054-->1683-->2920-->387-->4634-->1163-->556-->1058-->1600-->784-->3555-->2075-->3471-->1848-->3196-->671-->3899-->1276-->3590-->347-->528-->457-->893-->3279-->47-->1121-->4406-->761-->4020-->1934-->3921-->264-->3097-->3912-->3394-->1845-->4901-->1565-->4139-->2674-->4034-->559-->3936-->931-->466-->3365-->1673-->3461-->1960-->4731-->4189-->4291-->3688-->2201

Max Bandwidth Value :: 7625


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.04 seconds
Total Running time : 0.15 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 4)
Source Vertex = 2260
Destination Vertex = 3571

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 2260-->681-->3203-->4706-->3536-->3577-->21-->1773-->2913-->2589-->3249-->4301-->4365-->2950-->3923-->4055-->4278-->3669-->3604-->252-->3057-->31-->3429-->552-->1405-->1279-->4108-->491-->969-->2277-->3274-->978-->222-->3398-->1961-->1313-->1429-->4169-->10-->2293-->230-->4187-->2638-->4345-->4585-->526-->4954-->3173-->3805-->3150-->4683-->1318-->3846-->2056-->1924-->3571

Max Bandwidth Value :: 6964

Running time : 0.27 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 2260-->681-->3203-->4706-->3536-->3577-->21-->1773-->2913-->2589-->3249-->4301-->4365-->2950-->3923-->4055-->4278-->3669-->3604-->252-->3057-->31-->3429-->552-->1405-->1279-->4838-->4661-->4809-->3202-->576-->3-->2063-->606-->385-->4201-->3110-->4016-->3319-->3285-->3241-->3908-->4080-->4275-->3990-->4151-->1521-->829-->3078-->3958-->4507-->3306-->3297-->2680-->4042-->627-->986-->867-->608-->1973-->2907-->379-->73-->643-->4695-->4972-->4451-->4187-->2638-->4345-->4585-->526-->4954-->3173-->3805-->3150-->4683-->1318-->3846-->2056-->1924-->3571

Max Bandwidth Value :: 6964


Running time : 0.06 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 2260-->681-->3203-->4706-->3536-->3577-->21-->1773-->2913-->2589-->3249-->4301-->4365-->2950-->3923-->4055-->4278-->3669-->3604-->252-->3057-->31-->3429-->552-->1405-->1279-->4838-->4661-->4809-->3202-->576-->3-->2063-->606-->4941-->2653-->4612-->2620-->1323-->873-->2265-->328-->3033-->248-->4763-->1068-->215-->1054-->1683-->2920-->387-->4634-->1163-->556-->1058-->1600-->784-->3555-->2075-->3471-->1848-->3196-->671-->3899-->1276-->3590-->347-->528-->3290-->2638-->4345-->4585-->526-->4954-->3173-->3805-->3150-->4683-->1318-->3846-->2056-->1924-->3571

Max Bandwidth Value :: 6964


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 5)
Source Vertex = 2173
Destination Vertex = 3659

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 2173-->3721-->776-->3595-->50-->2765-->610-->2723-->2475-->1644-->1008-->2730-->1491-->2449-->379-->73-->663-->1330-->2431-->1149-->1641-->2260-->681-->3203-->4706-->4407-->3659

Max Bandwidth Value :: 6310

Running time : 0.22 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 2173-->3721-->776-->3595-->50-->3636-->1806-->875-->3091-->2434-->2829-->4143-->2419-->4628-->656-->552-->4524-->2940-->3789-->117-->1026-->4742-->1329-->3574-->2057-->2453-->4342-->1984-->3988-->511-->378-->4071-->3501-->3859-->4223-->690-->189-->3820-->330-->4475-->2542-->1041-->4311-->1285-->597-->2447-->2712-->2256-->3903-->3577-->3536-->4706-->4407-->3659

Max Bandwidth Value :: 6310


Running time : 0.05 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 2173-->3721-->776-->3595-->50-->156-->1589-->969-->491-->4108-->1279-->4838-->4661-->4809-->3202-->576-->3-->2063-->606-->4941-->2653-->4612-->2620-->1323-->873-->2265-->328-->3033-->248-->4763-->1068-->215-->1054-->1683-->2920-->387-->4835-->2550-->3263-->2271-->4376-->1794-->341-->4696-->370-->3914-->4485-->4225-->4886-->3659

Max Bandwidth Value :: 6310


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.04 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 6)
Source Vertex = 4279
Destination Vertex = 4246

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 4279-->373-->850-->904-->4062-->2514-->4239-->4796-->4149-->2829-->2434-->3091-->875-->3798-->3121-->4592-->3835-->1940-->1375-->2773-->3295-->2548-->2742-->13-->3142-->2049-->2881-->2607-->1340-->498-->1404-->2108-->2124-->4595-->4226-->1944-->4350-->996-->2537-->732-->2978-->1565-->4139-->1790-->612-->1191-->693-->640-->3081-->2084-->671-->3899-->1276-->3590-->347-->528-->3290-->2638-->4187-->230-->2293-->10-->4169-->1429-->1313-->1961-->3398-->222-->978-->3274-->2277-->969-->491-->4108-->1279-->1405-->552-->3429-->1182-->1108-->3326-->839-->1952-->1283-->4246

Max Bandwidth Value :: 7625

Running time : 0.29 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 4279-->373-->850-->904-->4062-->2514-->4239-->4796-->4149-->2829-->2434-->3091-->875-->3798-->3121-->4592-->3835-->1940-->1375-->1832-->267-->166-->3668-->2686-->4755-->1730-->548-->1584-->2129-->4884-->4887-->2881-->2607-->1340-->498-->1404-->2108-->2124-->4595-->4226-->1944-->4350-->996-->2537-->732-->2978-->1565-->4901-->1845-->3394-->3912-->885-->4163-->3777-->4524-->552-->3429-->1182-->1108-->3326-->839-->1952-->1283-->4246

Max Bandwidth Value :: 7625


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 4279-->373-->850-->904-->4062-->2514-->4239-->4796-->4149-->2829-->2434-->3091-->875-->3798-->3121-->4592-->3835-->1940-->1375-->1832-->267-->166-->3668-->2686-->4755-->1730-->548-->1584-->2129-->4884-->4887-->2881-->2607-->1340-->498-->1404-->2108-->2124-->4595-->4226-->1944-->4350-->996-->2537-->2114-->4795-->1077-->248-->3033-->328-->2265-->873-->1323-->2620-->4612-->2653-->4941-->606-->2063-->3-->576-->3202-->4809-->4661-->4838-->1279-->1405-->552-->3429-->1182-->1108-->3326-->839-->1952-->1283-->4246

Max Bandwidth Value :: 7625


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.03 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 7)
Source Vertex = 1712
Destination Vertex = 1038

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 1712-->4007-->3069-->1439-->4497-->1194-->49-->565-->870-->963-->3653-->4861-->3856-->197-->2157-->1038

Max Bandwidth Value :: 6075

Running time : 0.28 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 1712-->4007-->3069-->1439-->4497-->1194-->49-->565-->870-->963-->3653-->4861-->3856-->197-->2157-->1038

Max Bandwidth Value :: 6075


Running time : 0.08 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 1712-->4007-->3069-->1439-->4497-->1194-->49-->565-->870-->963-->3653-->4861-->3856-->197-->2157-->1038

Max Bandwidth Value :: 6075


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.03 seconds
Total Running time : 0.12 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 8)
Source Vertex = 1879
Destination Vertex = 3256

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 1879-->3053-->4894-->2509-->3126-->1715-->611-->525-->328-->2265-->873-->1323-->2620-->390-->2789-->543-->2475-->2723-->610-->2765-->50-->156-->2415-->3178-->1249-->184-->1731-->2269-->2470-->952-->460-->1623-->1391-->2693-->2232-->183-->2626-->1657-->1183-->3658-->2490-->672-->192-->142-->319-->2064-->20-->383-->208-->508-->2686-->3668-->166-->267-->1832-->1375-->2773-->3295-->2548-->2742-->13-->3142-->2049-->2881-->2607-->1340-->498-->1404-->2108-->2450-->2979-->3379-->2351-->1757-->2817-->2047-->3073-->949-->1759-->78-->2744-->1538-->3179-->1585-->1224-->3185-->2358-->3923-->2045-->2683-->3256

Max Bandwidth Value :: 6712

Running time : 0.26 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 1879-->3053-->4894-->2509-->3126-->1083-->4314-->305-->434-->4763-->1068-->215-->1054-->1683-->2920-->387-->4634-->1163-->556-->1058-->1600-->784-->3555-->2075-->3471-->1848-->3196-->671-->2084-->3081-->640-->693-->4969-->2465-->3828-->4453-->629-->1103-->1310-->3684-->2454-->3042-->1137-->4849-->3409-->4456-->620-->229-->3745-->3460-->4765-->1414-->909-->2981-->702-->4220-->3686-->2857-->4312-->24-->1618-->2518-->423-->1770-->4379-->2303-->402-->801-->2865-->2520-->4470-->1968-->3334-->2186-->3496-->3420-->4278-->4055-->3923-->2045-->2683-->3256

Max Bandwidth Value :: 6712


Running time : 0.06 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 1879-->3053-->4894-->2509-->3126-->1083-->4314-->305-->434-->4763-->248-->3033-->328-->2265-->873-->1323-->2620-->4612-->2653-->4941-->606-->2063-->3-->576-->3202-->4809-->4661-->4838-->1279-->1405-->552-->3429-->31-->3057-->252-->3604-->3669-->4278-->4055-->3923-->2045-->2683-->3256

Max Bandwidth Value :: 6712


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.12 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 9)
Source Vertex = 2489
Destination Vertex = 4899

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 2489-->2920-->1683-->1054-->215-->1068-->4763-->248-->1077-->4795-->2114-->2537-->996-->4350-->1944-->4226-->4595-->2124-->2108-->1404-->2810-->3930-->1261-->4899

Max Bandwidth Value :: 7241

Running time : 0.28 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 2489-->2920-->1683-->1054-->215-->1068-->4763-->248-->1077-->4795-->2114-->2537-->996-->4350-->1944-->4226-->4595-->2124-->2108-->1404-->2810-->3930-->1261-->4899

Max Bandwidth Value :: 7241


Running time : 0.06 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 2489-->2920-->1683-->1054-->215-->1068-->4763-->248-->1077-->4795-->2114-->2537-->996-->4350-->1944-->4226-->4595-->2124-->2108-->1404-->2810-->3930-->1261-->4899

Max Bandwidth Value :: 7241


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.03 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 10)
Source Vertex = 3829
Destination Vertex = 1689

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 3829-->1155-->3057-->31-->3429-->552-->1405-->1279-->4838-->4661-->4809-->3202-->576-->3-->2063-->606-->4941-->2653-->4612-->2620-->1323-->873-->2265-->328-->3033-->248-->4763-->1068-->215-->1054-->1683-->2920-->387-->4634-->1163-->556-->1058-->1600-->784-->3555-->2075-->3471-->1848-->3196-->671-->3899-->1276-->3590-->347-->528-->457-->893-->3279-->47-->1121-->4048-->687-->1604-->3679-->1689

Max Bandwidth Value :: 7818

Running time : 0.29 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 3829-->1155-->3057-->31-->3429-->552-->1405-->1279-->4838-->4661-->4809-->3202-->576-->3-->2063-->606-->4941-->2653-->4612-->2620-->1323-->873-->2265-->328-->3033-->248-->4763-->1068-->215-->1054-->1683-->2920-->387-->4634-->1163-->556-->1058-->1600-->784-->3555-->2075-->3471-->1848-->3196-->671-->3899-->1276-->3590-->347-->528-->457-->893-->3279-->47-->1121-->4048-->687-->1604-->3679-->1689

Max Bandwidth Value :: 7818


Running time : 0.08 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 3829-->1155-->3057-->31-->3429-->552-->1405-->1279-->4838-->4661-->4809-->3202-->576-->3-->2063-->606-->4941-->2653-->4612-->2620-->1323-->873-->2265-->328-->3033-->248-->4763-->1068-->215-->1054-->1683-->2920-->387-->4634-->1163-->556-->1058-->1600-->784-->3555-->2075-->3471-->1848-->3196-->671-->3899-->1276-->3590-->347-->528-->457-->893-->3279-->47-->1121-->4048-->687-->1604-->3679-->1689

Max Bandwidth Value :: 7818


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------


Program done executing..Press any key to quit!
