Generating graph with 5000 vertices in which every vertex has degree 6!
Graph generated in 0.01 seconds 

==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 1)
Source Vertex = 965
Destination Vertex = 3371

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 965-->4177-->1607-->2921-->2797-->864-->930-->1575-->1201-->2196-->1915-->513-->940-->992-->2877-->1870-->2721-->165-->1358-->3154-->1706-->1845-->882-->408-->158-->2530-->3060-->1357-->2686-->1573-->491-->3218-->622-->3680-->4369-->2545-->4902-->892-->3371

Max Bandwidth Value :: 6458

Running time : 0.23 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 965-->4177-->1607-->2662-->3509-->4873-->2968-->4406-->4905-->4470-->4218-->2898-->2635-->2751-->1668-->141-->577-->924-->1242-->2424-->2355-->4862-->3123-->2208-->4282-->2931-->92-->4350-->1480-->3145-->373-->1888-->3095-->1227-->2506-->906-->4579-->2453-->2742-->4884-->919-->1720-->622-->3680-->4369-->2545-->4902-->892-->3371

Max Bandwidth Value :: 6458


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 965-->4177-->1607-->2662-->3509-->4873-->2968-->4154-->2516-->4973-->4865-->4938-->1291-->2832-->4614-->3-->2374-->3739-->1609-->4639-->1469-->223-->660-->1045-->4004-->3336-->3021-->4734-->242-->1062-->4756-->4549-->2141-->4293-->4790-->4612-->4543-->3093-->3638-->4089-->3770-->1333-->3990-->4087-->1099-->2383-->3105-->3690-->3675-->3822-->2813-->4398-->3678-->3803-->1874-->2097-->3487-->3666-->397-->4405-->2545-->4902-->892-->3371

Max Bandwidth Value :: 6458


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 2)
Source Vertex = 4404
Destination Vertex = 666

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 4404-->35-->690-->1076-->766-->62-->973-->698-->368-->1916-->2205-->2139-->1476-->1955-->1818-->2346-->676-->943-->370-->200-->2826-->594-->2502-->1653-->1665-->3057-->319-->245-->2992-->723-->4190-->666

Max Bandwidth Value :: 5782

Running time : 0.25 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 4404-->35-->690-->4287-->4171-->4848-->3240-->4389-->1147-->359-->1811-->3760-->2549-->4701-->4965-->4022-->4608-->3795-->2824-->406-->4829-->3309-->4200-->1327-->2126-->2826-->2344-->3863-->3099-->3675-->2992-->723-->4190-->666

Max Bandwidth Value :: 5782


Running time : 0.06 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 4404-->35-->3738-->4750-->3617-->76-->592-->3132-->1754-->2961-->3242-->4558-->1699-->3782-->4079-->240-->2482-->206-->1872-->1027-->672-->3909-->954-->2821-->4707-->3884-->3825-->2330-->1876-->2930-->2618-->3609-->829-->2060-->2862-->3778-->4169-->3237-->510-->1432-->3954-->2351-->1331-->1979-->2599-->1339-->4024-->3417-->4525-->2655-->3315-->2688-->4808-->2452-->3561-->4050-->130-->4772-->3336-->3021-->4734-->242-->1062-->4756-->4549-->2141-->4293-->4790-->4612-->4543-->3093-->3638-->4089-->3770-->1333-->3990-->4087-->1099-->2383-->3105-->4999-->3483-->4871-->2959-->4462-->2910-->3684-->3711-->3234-->2364-->961-->2424-->1242-->2140-->175-->2281-->3812-->723-->4190-->666

Max Bandwidth Value :: 5782


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.03 seconds
Total Running time : 0.16 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 3)
Source Vertex = 4745
Destination Vertex = 574

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 4745-->1588-->2371-->3932-->2497-->2900-->1537-->2677-->2744-->2364-->961-->2424-->1331-->1979-->2599-->1489-->405-->1082-->1406-->656-->2009-->574

Max Bandwidth Value :: 6305

Running time : 0.25 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 4745-->1588-->2371-->3932-->3022-->1299-->1365-->4058-->1867-->3479-->2656-->4336-->3743-->4591-->4057-->3935-->4128-->3633-->953-->2086-->110-->4759-->4018-->2579-->2513-->1283-->658-->1992-->425-->1884-->1113-->3104-->2883-->4402-->873-->1605-->3348-->4288-->3307-->372-->656-->2009-->574

Max Bandwidth Value :: 6305


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 4745-->1588-->2371-->3932-->3022-->1297-->3839-->3650-->4192-->1482-->4350-->1364-->1214-->3776-->1460-->3764-->1662-->3749-->1813-->477-->2472-->3511-->3754-->3954-->2351-->1331-->1979-->2599-->1339-->4024-->3417-->4525-->2655-->3315-->2688-->4808-->2452-->3561-->4050-->130-->4772-->3336-->3021-->4734-->242-->1062-->4756-->4549-->2141-->4293-->4790-->4612-->4543-->3093-->3638-->4089-->3770-->1333-->3990-->4087-->1099-->2383-->3105-->3690-->4517-->993-->3060-->1268-->1951-->3728-->4629-->310-->4998-->3584-->2790-->1480-->3145-->373-->1888-->3921-->3075-->3415-->1958-->403-->656-->2009-->574

Max Bandwidth Value :: 6305


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.12 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 4)
Source Vertex = 3086
Destination Vertex = 4127

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 3086-->2154-->3044-->2281-->175-->2140-->1242-->2424-->961-->2364-->3234-->3711-->3684-->2910-->4462-->2959-->4871-->3483-->4999-->3105-->2383-->1099-->4087-->3990-->1333-->3770-->4089-->3638-->3093-->4543-->4612-->4790-->4293-->2141-->4549-->4762-->4563-->4112-->4682-->1969-->1263-->1734-->4295-->3611-->3431-->3169-->4769-->3869-->987-->4127

Max Bandwidth Value :: 6680

Running time : 0.29 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 3086-->2154-->3044-->2281-->175-->2140-->1242-->2424-->961-->2364-->3234-->3711-->3684-->2910-->4462-->2959-->4871-->3483-->4999-->3105-->2383-->1099-->4087-->3990-->1333-->3770-->4089-->3638-->3093-->4543-->4612-->4790-->4293-->2141-->4549-->4762-->4563-->4112-->4682-->1969-->1263-->1734-->4295-->3611-->3431-->3169-->4769-->3869-->987-->4127

Max Bandwidth Value :: 6680


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 3086-->2154-->3044-->2281-->175-->2140-->1242-->2424-->961-->2364-->3234-->3711-->3684-->2910-->4462-->2959-->4871-->3483-->4999-->3105-->2383-->1099-->4087-->3990-->1333-->3770-->4089-->3638-->3093-->4543-->4612-->4790-->4293-->2141-->4549-->4762-->4563-->4112-->4682-->1969-->1263-->1734-->4295-->3611-->3431-->3169-->4769-->3869-->987-->4127

Max Bandwidth Value :: 6680


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.03 seconds
Total Running time : 0.14 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 5)
Source Vertex = 1889
Destination Vertex = 3489

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 1889-->2165-->134-->4353-->1357-->3060-->993-->4517-->3690-->3105-->2383-->1099-->4087-->3990-->4109-->3400-->1751-->3489

Max Bandwidth Value :: 7786

Running time : 0.29 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 1889-->2165-->134-->4353-->1357-->3060-->993-->4517-->3690-->3105-->2383-->1099-->4087-->3990-->4109-->3400-->1751-->3489

Max Bandwidth Value :: 7786


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 1889-->2165-->134-->4353-->1357-->3060-->993-->4517-->3690-->3105-->2383-->1099-->4087-->3990-->4109-->3400-->1751-->3489

Max Bandwidth Value :: 7786


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.03 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 6)
Source Vertex = 3624
Destination Vertex = 4844

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 3624-->4028-->3410-->1196-->328-->2134-->1655-->3623-->44-->1214-->3776-->1460-->3764-->1662-->3749-->1813-->477-->2472-->3511-->3754-->3954-->2351-->1331-->1979-->2599-->886-->927-->3183-->3144-->1190-->1622-->2657-->2071-->3346-->1347-->1422-->3226-->284-->1253-->3924-->4195-->2024-->4889-->1234-->4003-->2037-->3161-->4204-->1583-->1927-->1381-->4844

Max Bandwidth Value :: 5658

Running time : 0.27 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 3624-->4028-->3410-->1196-->328-->2134-->1655-->3623-->44-->1214-->1364-->1456-->4857-->1323-->2774-->3731-->1971-->792-->1616-->644-->168-->4734-->242-->1062-->4756-->4534-->1215-->108-->2190-->3227-->714-->3974-->4752-->1371-->1664-->1668-->141-->52-->3324-->2419-->1782-->3814-->1523-->4266-->337-->1617-->282-->868-->1130-->4973-->4865-->4938-->4893-->1927-->1381-->4844

Max Bandwidth Value :: 5658


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 3624-->4028-->3410-->1196-->328-->2134-->1655-->3623-->44-->1214-->3776-->1460-->3764-->1662-->3749-->1813-->477-->2472-->3511-->3754-->3954-->2351-->1331-->1979-->2599-->1339-->4024-->3417-->4525-->2655-->3315-->2688-->4808-->2452-->3561-->4050-->130-->4772-->3336-->4004-->1045-->660-->223-->1469-->4639-->1609-->3739-->2374-->3-->4614-->2832-->1291-->4938-->4893-->1927-->1381-->4844

Max Bandwidth Value :: 5658


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.04 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 7)
Source Vertex = 3283
Destination Vertex = 4694

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 3283-->1382-->2391-->1368-->4100-->1379-->2134-->1655-->3623-->44-->1214-->3776-->1460-->3764-->1662-->3749-->1813-->477-->2472-->3511-->3754-->3954-->1432-->510-->3237-->4169-->3778-->2862-->2060-->829-->3609-->1124-->3126-->618-->1201-->1575-->930-->864-->440-->963-->526-->3066-->3201-->2498-->1630-->3185-->1441-->3722-->3259-->3658-->3840-->4238-->1030-->1247-->3850-->1810-->4400-->1948-->3274-->3911-->4310-->370-->3338-->2006-->2338-->4694

Max Bandwidth Value :: 7680

Running time : 0.3 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 3283-->1382-->2391-->1368-->4100-->1379-->2134-->1655-->3623-->44-->1214-->1364-->1456-->4857-->1323-->2774-->3731-->1971-->792-->1616-->644-->168-->4734-->242-->1062-->4756-->4549-->2141-->4293-->4790-->4612-->4543-->3093-->3638-->4089-->3770-->1333-->3990-->4087-->1099-->2383-->3105-->4999-->3483-->4871-->2959-->4462-->2910-->3684-->3711-->3234-->2364-->961-->2424-->1242-->2140-->175-->2281-->3044-->2154-->3086-->4272-->3966-->4730-->3721-->1407-->1145-->1030-->1247-->3850-->1810-->4400-->1948-->3274-->3911-->4310-->370-->3338-->2006-->2338-->4694

Max Bandwidth Value :: 7680


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 3283-->1382-->2391-->1368-->4100-->1379-->2134-->1655-->3623-->44-->1214-->3776-->1460-->3764-->1662-->3749-->1813-->477-->2472-->3511-->3754-->3954-->2351-->1331-->1979-->2599-->1339-->4024-->3417-->4525-->2655-->3315-->2688-->4808-->2452-->3561-->4050-->130-->4772-->3336-->3021-->4734-->242-->1062-->4756-->4549-->2141-->4293-->4790-->4612-->4543-->3093-->3638-->4089-->3770-->1333-->3990-->4087-->1099-->2383-->3105-->4999-->3483-->4871-->2959-->4462-->2910-->3684-->3711-->3234-->2364-->961-->2424-->1242-->2140-->175-->2281-->3044-->2154-->3086-->4272-->3966-->4730-->3721-->1407-->1145-->1030-->1247-->3850-->1810-->4400-->1948-->3274-->3911-->4310-->370-->3338-->2006-->2338-->4694

Max Bandwidth Value :: 7680


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.03 seconds
Total Running time : 0.14 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 8)
Source Vertex = 1407
Destination Vertex = 4624

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 1407-->3721-->4730-->3966-->4272-->3086-->2154-->3044-->2281-->175-->2140-->1242-->2424-->961-->2364-->3234-->3711-->3684-->2910-->4462-->2959-->4871-->3483-->4999-->3105-->2383-->1099-->4087-->3990-->1333-->3770-->4089-->3638-->3093-->4543-->4612-->4790-->4293-->2141-->4549-->4756-->1062-->242-->4734-->3021-->3336-->4772-->130-->4050-->3561-->2452-->4808-->2688-->3315-->2655-->4525-->3417-->4024-->1339-->2599-->1979-->1331-->2351-->3954-->1432-->510-->3237-->4169-->3778-->2862-->2060-->829-->3609-->1124-->3126-->618-->1201-->1575-->930-->864-->440-->963-->526-->3066-->135-->4945-->621-->1806-->1018-->2795-->2989-->1755-->3512-->1785-->3647-->689-->4325-->197-->4624

Max Bandwidth Value :: 6195

Running time : 0.3 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 1407-->3721-->4730-->3966-->4272-->3086-->2154-->3044-->2281-->175-->2140-->1242-->2424-->961-->2364-->3234-->3711-->3684-->2910-->4462-->2959-->4871-->3483-->4999-->3105-->2383-->1099-->4087-->3990-->1333-->3770-->4089-->3638-->3093-->4543-->4612-->4790-->4293-->2141-->4549-->4756-->1062-->242-->4734-->3021-->3336-->4772-->130-->4050-->3561-->2452-->4808-->2688-->3315-->2655-->4525-->3417-->4024-->3072-->1050-->302-->2614-->4365-->4923-->229-->784-->930-->864-->440-->963-->526-->3066-->135-->4945-->621-->1806-->1018-->2795-->2989-->1755-->3512-->1785-->3647-->689-->4325-->197-->4624

Max Bandwidth Value :: 6195


Running time : 0.08 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 1407-->3721-->4730-->3966-->4272-->3086-->2154-->3044-->2281-->175-->2140-->1242-->2424-->961-->2364-->3234-->3711-->3684-->2910-->4462-->2959-->4871-->3483-->4999-->3105-->2383-->1099-->4087-->3990-->1333-->3770-->4089-->3638-->3093-->4543-->4612-->4790-->4293-->2141-->4549-->4756-->1062-->242-->4734-->3021-->3336-->4772-->130-->4050-->3561-->2452-->4808-->2688-->3315-->2655-->4525-->3417-->4024-->3072-->1050-->302-->2614-->4365-->4923-->229-->784-->930-->864-->440-->963-->526-->3066-->135-->4945-->621-->1806-->1018-->2795-->2989-->1755-->3512-->1785-->3647-->689-->4325-->197-->4624

Max Bandwidth Value :: 6195


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.12 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 9)
Source Vertex = 3281
Destination Vertex = 4132

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 3281-->4821-->3518-->3402-->98-->2351-->3954-->1432-->510-->3237-->4169-->3778-->2862-->2060-->829-->3609-->2618-->2930-->1876-->2330-->3825-->3884-->4707-->2821-->954-->3909-->672-->1027-->1872-->206-->2482-->240-->4079-->3782-->1699-->4558-->1252-->2593-->3902-->3291-->4220-->4464-->604-->4132

Max Bandwidth Value :: 7674

Running time : 0.3 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 3281-->4821-->3518-->3402-->98-->2351-->3954-->1432-->510-->3237-->4169-->3778-->2862-->2060-->829-->3609-->2618-->2930-->1876-->2330-->3825-->3884-->4707-->2821-->954-->3909-->672-->1027-->1872-->206-->2482-->240-->4079-->3782-->1699-->4558-->1252-->2593-->3902-->3291-->4220-->4464-->604-->4132

Max Bandwidth Value :: 7674


Running time : 0.06 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 3281-->4821-->3518-->3402-->98-->2351-->3954-->1432-->510-->3237-->4169-->3778-->2862-->2060-->829-->3609-->2618-->2930-->1876-->2330-->3825-->3884-->4707-->2821-->954-->3909-->672-->1027-->1872-->206-->2482-->240-->4079-->3782-->1699-->4558-->1252-->2593-->3902-->3291-->4220-->4464-->604-->4132

Max Bandwidth Value :: 7674


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.04 seconds
Total Running time : 0.14 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 10)
Source Vertex = 1770
Destination Vertex = 1458

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 1770-->1012-->2390-->868-->1130-->1447-->318-->212-->365-->1276-->2402-->1251-->1961-->644-->1616-->932-->1450-->1877-->2241-->113-->1371-->1664-->1668-->141-->577-->924-->1242-->2424-->961-->1308-->2237-->700-->1953-->2243-->2077-->1884-->425-->2069-->352-->123-->850-->1016-->546-->635-->495-->1733-->210-->772-->634-->1458

Max Bandwidth Value :: 5624

Running time : 0.2 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 1770-->1012-->2390-->868-->282-->3330-->2308-->2664-->2181-->3684-->3711-->3409-->1438-->1683-->3608-->2524-->3318-->1863-->3289-->4157-->1812-->1800-->4408-->634-->1458

Max Bandwidth Value :: 5624


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 1770-->1012-->2390-->868-->1130-->4973-->4865-->4938-->1291-->2832-->4614-->3-->2374-->3739-->1609-->4639-->1469-->223-->660-->1045-->4004-->3336-->3021-->4734-->242-->1062-->4756-->4549-->2141-->4293-->4790-->4612-->4543-->3093-->3638-->4089-->3770-->1333-->3990-->4087-->3517-->2041-->4073-->2015-->3708-->1104-->1458

Max Bandwidth Value :: 5624


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.12 seconds
---------------------------------------------------------------------------


Program done executing..Press any key to quit!
