Generating graph with 5000 vertices in which every vertex has degree 6!
Graph generated in 3.11 seconds 

==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 1)
Source Vertex = 323
Destination Vertex = 2118

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 323-->3601-->112-->726-->2468-->247-->4905-->3436-->4311-->1648-->1909-->2274-->4226-->350-->1759-->2143-->2367-->2782-->1194-->455-->1559-->3661-->2916-->1647-->598-->867-->3396-->588-->4241-->4104-->48-->4361-->351-->2507-->1501-->4424-->3006-->671-->723-->3097-->4250-->1495-->900-->2579-->2716-->3909-->1544-->858-->3882-->4166-->3698-->4098-->3673-->4013-->4396-->2917-->4703-->2118

Max Bandwidth Value :: 6204

Running time : 0.31 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 323-->3601-->112-->726-->2468-->247-->4905-->3436-->4311-->1648-->1909-->2274-->4226-->350-->1759-->2143-->2367-->2782-->1194-->455-->1559-->3661-->2845-->1051-->1928-->1353-->3187-->1387-->704-->765-->3189-->866-->2483-->574-->4471-->1410-->2067-->281-->3556-->2275-->1086-->1997-->931-->772-->3214-->782-->1753-->85-->4390-->4683-->4627-->2676-->56-->3580-->4098-->3673-->4013-->4396-->2917-->4703-->2118

Max Bandwidth Value :: 6204


Running time : 0.08 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 323-->3601-->112-->726-->2468-->247-->4905-->3436-->4311-->1648-->1909-->2274-->4226-->350-->1759-->2143-->2367-->2782-->1194-->455-->1559-->3661-->2916-->1647-->598-->867-->3396-->588-->1389-->1873-->2961-->939-->931-->772-->3214-->782-->1753-->85-->4390-->4683-->4627-->2676-->56-->3580-->4098-->3673-->4013-->4396-->2917-->4703-->2118

Max Bandwidth Value :: 6204


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.04 seconds
Total Running time : 0.14 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 2)
Source Vertex = 1793
Destination Vertex = 3346

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 1793-->2192-->4602-->3118-->3407-->2461-->3241-->3023-->3723-->1380-->3741-->1255-->1106-->2717-->945-->981-->180-->3261-->1323-->3279-->143-->2683-->969-->1882-->1275-->2534-->1998-->829-->1157-->3441-->3071-->2143-->1759-->1716-->1005-->3146-->2001-->1149-->1191-->1792-->1599-->1713-->1247-->1865-->1335-->1651-->3161-->1025-->801-->1897-->940-->1425-->1585-->1004-->1154-->3246-->1838-->3033-->721-->728-->1817-->600-->3761-->3554-->2815-->3758-->1874-->798-->1644-->1702-->517-->3346

Max Bandwidth Value :: 6805

Running time : 0.28 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 1793-->2192-->4602-->3118-->3407-->2461-->3241-->4566-->959-->84-->2001-->1149-->1191-->1792-->1599-->1713-->505-->1363-->4029-->2765-->3098-->1396-->4907-->1043-->3346

Max Bandwidth Value :: 6805


Running time : 0.06 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 1793-->2192-->4602-->512-->4926-->3184-->4237-->4126-->4323-->4212-->3186-->1421-->4749-->3943-->3961-->2209-->3471-->3433-->4272-->708-->1453-->2735-->3179-->269-->891-->2097-->3794-->1505-->2340-->1958-->1553-->1284-->2684-->2247-->3873-->1171-->2777-->1173-->2713-->2123-->3452-->1988-->2765-->3098-->1396-->4907-->1043-->3346

Max Bandwidth Value :: 6805


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.04 seconds
Total Running time : 0.14 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 3)
Source Vertex = 3126
Destination Vertex = 2838

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 3126-->1627-->4733-->4565-->4746-->2020-->3510-->3152-->2990-->3500-->718-->2670-->477-->3167-->2079-->4093-->2177-->2925-->759-->3580-->4098-->3698-->3808-->739-->828-->2795-->1928-->1353-->3187-->1387-->704-->765-->3189-->866-->2483-->97-->1791-->4974-->3119-->3374-->3012-->3620-->2838

Max Bandwidth Value :: 6486

Running time : 0.3 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 3126-->1627-->4733-->4565-->4746-->2020-->3510-->3152-->2990-->3500-->718-->2670-->477-->3167-->2079-->4093-->2177-->2925-->759-->3580-->56-->2676-->4627-->4683-->4390-->85-->1753-->782-->3214-->1203-->4598-->4440-->3999-->3664-->4179-->2420-->1134-->1059-->1390-->1530-->2450-->1400-->2791-->2204-->313-->458-->4990-->2517-->432-->2656-->935-->1562-->1004-->1154-->3246-->1838-->994-->556-->4234-->3316-->4633-->4916-->4486-->4941-->4518-->2302-->1699-->3956-->771-->1579-->4638-->1586-->2817-->4785-->586-->2347-->3594-->318-->2115-->740-->4841-->1191-->1149-->2001-->84-->959-->2654-->599-->197-->3550-->834-->2548-->802-->2725-->1718-->4061-->2067-->1410-->4471-->574-->2483-->97-->1791-->4974-->3119-->3374-->3012-->3620-->2838

Max Bandwidth Value :: 6486


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 3126-->1627-->4733-->4565-->4746-->2020-->3510-->3152-->2990-->3500-->718-->2670-->477-->3167-->2079-->4093-->2177-->2925-->759-->3580-->56-->2676-->4627-->4683-->4390-->85-->1753-->782-->3214-->772-->931-->939-->2961-->1873-->1389-->588-->3396-->867-->598-->1647-->2916-->3661-->2845-->1051-->1928-->1353-->3187-->1387-->704-->765-->3189-->866-->2483-->97-->1791-->4974-->3119-->3374-->3012-->3620-->2838

Max Bandwidth Value :: 6486


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.03 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 4)
Source Vertex = 2984
Destination Vertex = 3385

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 2984-->4170-->826-->773-->3800-->517-->3346-->1043-->4907-->1396-->3098-->2765-->1988-->3452-->2123-->2713-->1173-->2777-->1171-->3001-->1892-->3539-->2791-->1400-->2450-->1530-->1390-->1059-->1134-->2420-->4179-->1009-->347-->3894-->2864-->415-->2515-->2231-->2336-->4818-->1639-->3388-->4377-->2175-->3403-->2541-->3360-->2117-->3385

Max Bandwidth Value :: 7203

Running time : 0.31 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 2984-->4170-->826-->773-->3800-->517-->3346-->1043-->4907-->1396-->3098-->2765-->1988-->3452-->2123-->2713-->1173-->2777-->1171-->3001-->1892-->3539-->2791-->1400-->2450-->1530-->1390-->1059-->1134-->2420-->4179-->1009-->347-->3894-->2864-->415-->2515-->2231-->2336-->4818-->1639-->3388-->4377-->2175-->3403-->2541-->3360-->2117-->3385

Max Bandwidth Value :: 7203


Running time : 0.06 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 2984-->4170-->826-->773-->3800-->517-->3346-->1043-->4907-->1396-->3098-->2765-->1988-->3452-->2123-->2713-->1173-->2777-->1171-->3001-->1892-->3539-->2791-->1400-->2450-->1530-->1390-->1059-->1134-->2420-->4179-->1009-->347-->3894-->2864-->415-->2515-->2231-->2336-->4818-->1639-->3388-->4377-->2175-->3403-->2541-->3360-->2117-->3385

Max Bandwidth Value :: 7203


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.03 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 5)
Source Vertex = 3748
Destination Vertex = 4517

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 3748-->3367-->1985-->2453-->1694-->2021-->1692-->624-->289-->699-->2774-->346-->2217-->1056-->595-->1947-->1030-->1012-->2386-->1307-->2791-->1400-->2450-->1530-->1390-->1059-->1394-->50-->3053-->223-->832-->3384-->805-->3076-->4517

Max Bandwidth Value :: 6277

Running time : 0.25 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 3748-->3367-->1985-->2778-->2488-->4221-->557-->4296-->1900-->1834-->3502-->2402-->2171-->3821-->3869-->744-->4476-->3494-->2207-->4924-->1199-->4119-->3058-->4518-->4941-->813-->1822-->2779-->4762-->4094-->2332-->3076-->4517

Max Bandwidth Value :: 6277


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 3748-->3367-->4482-->2187-->4873-->2022-->3030-->618-->3251-->1729-->3683-->184-->1444-->2051-->3284-->2965-->553-->2544-->4545-->1463-->3405-->4470-->4579-->4741-->1222-->114-->3556-->2275-->1086-->1997-->931-->772-->3214-->782-->1753-->85-->4390-->4683-->4627-->2676-->56-->3580-->4098-->3698-->4166-->3882-->3934-->1714-->2635-->3681-->4194-->4781-->1955-->4568-->3936-->3468-->3423-->1304-->2591-->1171-->3001-->1892-->3539-->2791-->1400-->2450-->1530-->1390-->1059-->1134-->2420-->4179-->1009-->347-->3894-->2864-->4130-->4365-->4698-->4239-->4975-->3577-->3554-->3761-->600-->1817-->728-->721-->3033-->1838-->994-->556-->4234-->3316-->4633-->4916-->4486-->4941-->813-->1822-->1327-->2695-->2942-->91-->1358-->2589-->1407-->3201-->2003-->1877-->3561-->2132-->4147-->792-->1809-->1110-->2095-->3398-->4652-->433-->3400-->2393-->4131-->4076-->4094-->2332-->3076-->4517

Max Bandwidth Value :: 6277


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 6)
Source Vertex = 1558
Destination Vertex = 2246

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 1558-->3146-->1005-->1716-->1759-->350-->1776-->290-->1754-->666-->906-->729-->2246

Max Bandwidth Value :: 5379

Running time : 0.23 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 1558-->3146-->1491-->965-->1048-->1015-->3585-->697-->4800-->986-->2766-->3577-->4975-->4239-->4765-->4548-->4833-->596-->4223-->2685-->1194-->2782-->4389-->1259-->1224-->1327-->1822-->813-->4941-->4486-->4916-->4633-->3316-->4234-->1332-->29-->1495-->2246

Max Bandwidth Value :: 5379


Running time : 0.06 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 1558-->3146-->2001-->1149-->1191-->1792-->1599-->4150-->607-->4618-->2114-->3014-->1669-->126-->4487-->3665-->3192-->1128-->4778-->4152-->4846-->465-->2159-->4858-->1775-->1557-->196-->617-->3611-->1302-->266-->3397-->2902-->398-->3981-->257-->351-->2507-->1501-->4424-->3006-->671-->723-->3097-->4250-->1495-->900-->2579-->2716-->3909-->1544-->858-->3882-->3934-->1714-->2635-->3681-->4194-->4781-->1955-->4568-->3936-->3468-->3423-->1304-->2591-->1171-->3001-->1892-->3539-->2791-->1400-->2450-->1530-->1390-->1059-->1134-->2420-->4179-->1009-->347-->3894-->2864-->4130-->4365-->4698-->4239-->4975-->3577-->3554-->3761-->600-->1817-->728-->721-->3033-->1838-->994-->556-->4234-->3316-->1760-->996-->729-->2246

Max Bandwidth Value :: 5379


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.04 seconds
Total Running time : 0.17 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 7)
Source Vertex = 3870
Destination Vertex = 3969

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 3870-->3241-->4566-->959-->84-->2001-->1149-->1191-->1792-->1599-->4150-->607-->4618-->2114-->3014-->1669-->126-->4487-->3665-->3192-->1128-->4778-->4152-->4846-->465-->4775-->4228-->1718-->4061-->2067-->281-->3556-->2275-->1086-->1997-->931-->939-->2961-->1873-->1389-->588-->4241-->4104-->48-->4361-->351-->2507-->1501-->4424-->3006-->671-->723-->3097-->4250-->1495-->900-->2579-->4895-->846-->3308-->3969

Max Bandwidth Value :: 7615

Running time : 0.31 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 3870-->3241-->4566-->959-->84-->2001-->1149-->1191-->1792-->1599-->4150-->607-->4618-->2114-->3014-->1669-->126-->4487-->3665-->3192-->1128-->4778-->4152-->4846-->465-->4775-->4228-->1718-->4061-->2067-->281-->3556-->114-->1222-->4741-->4579-->4470-->3405-->1463-->4545-->2544-->553-->2965-->2603-->1120-->4353-->1089-->4558-->4873-->2022-->3030-->980-->360-->2196-->745-->1387-->3187-->1353-->1928-->1051-->2845-->3661-->2916-->1647-->598-->867-->3396-->588-->4241-->4104-->48-->4361-->351-->2507-->1501-->4424-->3006-->671-->723-->3097-->4250-->1495-->900-->2579-->4895-->846-->3308-->3969

Max Bandwidth Value :: 7615


Running time : 0.08 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 3870-->3241-->4566-->959-->84-->2001-->1149-->1191-->1792-->1599-->4150-->607-->4618-->2114-->3014-->1669-->126-->4487-->3665-->3192-->1128-->4778-->4152-->4846-->465-->2159-->4858-->1775-->1557-->196-->617-->3611-->1302-->266-->3397-->2902-->398-->3981-->257-->351-->2507-->1501-->4424-->3006-->671-->723-->3097-->4250-->1495-->900-->2579-->4895-->846-->3308-->3969

Max Bandwidth Value :: 7615


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.14 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 8)
Source Vertex = 1713
Destination Vertex = 4324

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 1713-->505-->1363-->2943-->865-->816-->775-->949-->2494-->1251-->1599-->4150-->607-->4618-->2114-->3014-->1669-->126-->4487-->3665-->3192-->1128-->4778-->4152-->4846-->465-->4775-->4228-->1718-->4061-->2067-->281-->3556-->2275-->1086-->1997-->931-->939-->2961-->1873-->1389-->588-->3396-->867-->598-->1647-->2916-->3661-->1559-->455-->1194-->2782-->2367-->2143-->1759-->1716-->3193-->4324

Max Bandwidth Value :: 7615

Running time : 0.29 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 1713-->505-->1363-->2943-->865-->816-->775-->949-->2494-->1251-->1599-->4150-->607-->4618-->2114-->3014-->1669-->126-->4487-->3665-->3192-->1128-->4778-->4152-->4846-->465-->4775-->4228-->1718-->4061-->2067-->281-->3556-->114-->1222-->4741-->4579-->4470-->3405-->1463-->4545-->2544-->553-->2965-->2603-->1120-->4353-->1089-->4558-->4873-->2022-->3030-->980-->360-->2196-->745-->1387-->3187-->1353-->1928-->1051-->2845-->3661-->1559-->455-->1194-->2782-->2367-->2143-->1759-->1716-->3193-->4324

Max Bandwidth Value :: 7615


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 1713-->505-->1363-->2943-->865-->816-->775-->949-->2494-->1251-->1599-->4150-->607-->4618-->2114-->3014-->1669-->126-->4487-->3665-->3192-->1128-->4778-->4152-->4846-->465-->2159-->4858-->1775-->1557-->196-->617-->3611-->1302-->266-->3397-->2902-->398-->3981-->257-->351-->2507-->1501-->4424-->3006-->671-->723-->3097-->4250-->1495-->900-->2579-->2716-->3909-->1544-->858-->3882-->4166-->3698-->4098-->3580-->56-->2676-->4627-->4683-->4390-->85-->1753-->782-->3214-->772-->931-->939-->2961-->1873-->1389-->588-->3396-->867-->598-->1647-->2916-->3661-->1559-->455-->1194-->2782-->2367-->2143-->1759-->1716-->3193-->4324

Max Bandwidth Value :: 7615


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 9)
Source Vertex = 1043
Destination Vertex = 4037

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 1043-->4907-->1396-->3098-->2765-->1988-->3452-->2123-->2713-->1173-->2777-->1171-->2591-->1304-->3423-->3468-->3936-->4568-->1955-->4781-->4194-->3681-->2635-->1714-->3934-->3882-->858-->1544-->3909-->2716-->2579-->900-->1495-->4250-->3097-->723-->671-->3006-->4424-->1501-->2507-->351-->257-->3981-->398-->2902-->3397-->266-->1302-->3611-->617-->196-->1557-->1775-->4858-->2159-->465-->4846-->4152-->4778-->1128-->3192-->3665-->4487-->126-->1669-->3014-->2114-->4618-->607-->4150-->1599-->1792-->1191-->1149-->2001-->84-->959-->2654-->599-->197-->3550-->3809-->102-->1200-->2707-->1915-->3742-->3237-->3990-->2229-->2572-->907-->4102-->4037

Max Bandwidth Value :: 6901

Running time : 0.33 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 1043-->4907-->1396-->3098-->2765-->1988-->3452-->2123-->2713-->1173-->2777-->1171-->2591-->1304-->3423-->3468-->3936-->4568-->1955-->4781-->4194-->3681-->2635-->1714-->3934-->3882-->858-->1544-->3909-->2716-->2579-->900-->1495-->4250-->3097-->723-->671-->3006-->4424-->1501-->2507-->351-->257-->3981-->398-->2902-->3397-->266-->1302-->3611-->617-->196-->1557-->1775-->4858-->2159-->465-->4846-->4152-->4778-->1128-->3192-->3665-->4487-->126-->1669-->3014-->2114-->4618-->607-->4150-->1599-->1792-->1191-->1149-->2001-->84-->959-->2654-->599-->197-->3550-->3809-->102-->1200-->2707-->1915-->3742-->3237-->3990-->2229-->2572-->907-->4102-->4037

Max Bandwidth Value :: 6901


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 1043-->4907-->1396-->3098-->2765-->1988-->3452-->2123-->2713-->1173-->2777-->1171-->2591-->1304-->3423-->3468-->3936-->4568-->1955-->4781-->4194-->3681-->2635-->1714-->3934-->3882-->858-->1544-->3909-->2716-->2579-->900-->1495-->4250-->3097-->723-->671-->3006-->4424-->1501-->2507-->351-->257-->3981-->398-->2902-->3397-->266-->1302-->3611-->617-->196-->1557-->1775-->4858-->2159-->465-->4846-->4152-->4778-->1128-->3192-->3665-->4487-->126-->1669-->3014-->2114-->4618-->607-->4150-->1599-->1792-->1191-->1149-->2001-->84-->959-->2654-->599-->197-->3550-->3809-->102-->1200-->2707-->1915-->3742-->3237-->3990-->2229-->2572-->907-->4102-->4037

Max Bandwidth Value :: 6901


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.04 seconds
Total Running time : 0.14 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 10)
Source Vertex = 427
Destination Vertex = 3313

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 427-->1688-->1125-->4357-->1423-->1983-->2739-->4329-->2613-->2634-->3088-->2424-->1241-->1923-->2521-->1155-->527-->2655-->2295-->394-->2867-->1346-->2859-->840-->3304-->2737-->183-->2966-->758-->1089-->186-->3007-->2218-->2891-->1011-->552-->1412-->947-->1537-->3295-->765-->704-->1387-->959-->84-->2001-->1149-->1191-->1792-->1599-->1713-->505-->1363-->2778-->1985-->2453-->1694-->2021-->1692-->624-->289-->699-->2774-->346-->2217-->1056-->595-->1947-->1030-->2730-->2053-->3092-->1813-->1539-->2490-->481-->52-->1455-->937-->3166-->2574-->1146-->2524-->1581-->2164-->2827-->1967-->2121-->1625-->436-->781-->2799-->1610-->188-->2214-->581-->439-->3813-->645-->1365-->2203-->3313

Max Bandwidth Value :: 6436

Running time : 0.23 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 427-->1688-->1125-->4725-->2253-->4597-->3976-->4882-->4401-->1900-->1834-->3502-->2964-->4536-->746-->2417-->1204-->4901-->807-->4390-->4683-->799-->68-->1815-->2542-->2745-->844-->2743-->418-->2169-->888-->3813-->645-->1365-->2203-->3313

Max Bandwidth Value :: 6436


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 427-->1688-->1125-->4357-->1423-->3307-->3972-->28-->2269-->2952-->4536-->495-->991-->1151-->895-->4737-->4273-->1998-->829-->1157-->4361-->351-->257-->3981-->398-->2902-->3397-->266-->1302-->3611-->617-->196-->1557-->1775-->4858-->2159-->465-->4846-->4152-->4778-->1128-->3192-->3665-->4487-->126-->1669-->3014-->2114-->4618-->607-->4150-->1599-->1792-->1191-->1149-->2001-->84-->959-->2654-->599-->1633-->4053-->79-->4641-->2693-->581-->439-->3813-->645-->1365-->2203-->3313

Max Bandwidth Value :: 6436


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.04 seconds
Total Running time : 0.15 seconds
---------------------------------------------------------------------------


Program done executing..Press any key to quit!
