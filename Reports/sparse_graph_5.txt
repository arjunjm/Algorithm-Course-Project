Generating graph with 5000 vertices in which every vertex has degree 6!
Graph generated in 0.44 seconds 

==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 1)
Source Vertex = 1121
Destination Vertex = 719

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 1121-->3834-->3361-->4110-->68-->1514-->1035-->3779-->1174-->4164-->4796-->3417-->4819-->898-->4202-->859-->3988-->451-->2372-->2808-->3087-->1512-->4456-->3505-->3444-->1054-->1640-->2113-->2224-->682-->2697-->1430-->3556-->2833-->1835-->2636-->1596-->142-->4845-->3782-->1517-->3634-->3627-->4336-->3423-->426-->1207-->2115-->1079-->4106-->240-->4926-->269-->485-->2547-->742-->2291-->4005-->2821-->3745-->1289-->3215-->3147-->387-->2281-->4192-->3221-->2556-->4963-->450-->772-->2411-->4560-->3062-->3282-->719

Max Bandwidth Value :: 7039

Running time : 0.33 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 1121-->3834-->3361-->4110-->68-->1514-->1035-->3779-->1174-->4164-->4796-->1001-->3315-->4645-->1215-->4612-->4080-->2835-->4409-->3290-->3630-->559-->915-->207-->3098-->3891-->4995-->4487-->4771-->3642-->2340-->1008-->4155-->3188-->3551-->982-->2934-->1498-->2824-->3782-->1517-->3634-->3627-->4336-->3423-->426-->1207-->2115-->1079-->4106-->240-->4926-->269-->485-->2547-->742-->2291-->4005-->2821-->3745-->1289-->3215-->3147-->387-->2281-->4192-->3221-->2556-->4963-->450-->772-->2411-->4560-->3062-->3282-->719

Max Bandwidth Value :: 7039


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 1121-->3834-->3361-->4110-->68-->1514-->1035-->3779-->1174-->4164-->4796-->1001-->3315-->4645-->1215-->4612-->4080-->2835-->4409-->3290-->3630-->559-->915-->207-->3098-->3891-->4995-->4487-->4771-->3642-->2340-->1008-->4155-->3188-->3551-->982-->2934-->1498-->2824-->3782-->1517-->3634-->3627-->4336-->3423-->426-->1207-->2115-->1079-->4106-->240-->4926-->269-->485-->2547-->742-->2291-->4005-->2821-->3745-->1289-->3215-->3147-->387-->2281-->4192-->3221-->2556-->4963-->450-->772-->2411-->4560-->3062-->3282-->719

Max Bandwidth Value :: 7039


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.14 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 2)
Source Vertex = 1599
Destination Vertex = 1868

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 1599-->3840-->3728-->876-->1889-->1939-->4423-->2620-->306-->3537-->1357-->2476-->1757-->752-->2997-->363-->2077-->2455-->291-->1124-->1128-->1499-->1343-->1684-->2014-->2410-->1755-->2090-->466-->847-->1493-->513-->1977-->1784-->2117-->3126-->1258-->2316-->1952-->3505-->4018-->1868

Max Bandwidth Value :: 6353

Running time : 0.26 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 1599-->3840-->3728-->876-->1889-->1939-->88-->1819-->1335-->4687-->3093-->4804-->4408-->4400-->610-->3182-->3078-->4288-->3284-->3459-->2316-->1952-->3505-->4018-->1868

Max Bandwidth Value :: 6353


Running time : 0.05 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 1599-->3840-->3728-->876-->1889-->1939-->4423-->2620-->306-->3537-->1357-->2709-->2998-->1425-->3199-->1468-->316-->4642-->431-->4462-->2128-->4730-->2196-->2429-->1780-->722-->2946-->2825-->1507-->1614-->3268-->235-->4293-->3101-->3731-->1816-->3452-->4343-->2458-->3569-->888-->1256-->1390-->1682-->497-->3908-->3230-->4929-->1936-->3105-->1473-->3326-->4940-->4487-->4995-->3891-->3098-->207-->915-->559-->3630-->3290-->4409-->2835-->4080-->4612-->1215-->4645-->3315-->1001-->4796-->3417-->4819-->898-->4202-->859-->3988-->451-->2372-->2808-->3087-->1512-->4456-->3505-->4018-->1868

Max Bandwidth Value :: 6353


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.03 seconds
Total Running time : 0.14 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 3)
Source Vertex = 4888
Destination Vertex = 2030

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 4888-->4531-->1056-->587-->2706-->4910-->2773-->1238-->3504-->1590-->2915-->200-->1288-->3337-->2559-->3709-->592-->1110-->110-->2557-->1293-->4308-->2352-->451-->2372-->1886-->1317-->3954-->3598-->175-->2452-->4131-->890-->708-->1144-->103-->2019-->1771-->264-->1298-->846-->3515-->1630-->2485-->681-->605-->2833-->3556-->1430-->2697-->682-->2224-->503-->3311-->325-->3678-->4046-->1763-->3486-->2412-->3402-->1340-->1303-->3674-->2030

Max Bandwidth Value :: 7295

Running time : 0.27 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 4888-->4531-->1056-->587-->2706-->4910-->2773-->4841-->4255-->4526-->3059-->34-->698-->3523-->3343-->2330-->4438-->4348-->3403-->599-->2768-->24-->1835-->2833-->605-->4615-->1372-->1666-->1217-->808-->2047-->4932-->2834-->1831-->4819-->898-->4202-->859-->3988-->1187-->2301-->3762-->4731-->93-->183-->4021-->545-->2511-->79-->2836-->207-->915-->4524-->1790-->1973-->4653-->2534-->4175-->4711-->2921-->1375-->3654-->2789-->3090-->3608-->1181-->4744-->1676-->1727-->3862-->2122-->4421-->4168-->2584-->3402-->1340-->1303-->3674-->2030

Max Bandwidth Value :: 7295


Running time : 0.08 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 4888-->4531-->1056-->587-->2706-->4910-->2773-->1238-->4698-->2763-->4614-->4140-->3290-->4409-->2835-->4080-->4612-->1215-->4645-->3315-->1001-->4796-->3417-->4819-->898-->4202-->859-->3988-->451-->2372-->2808-->3087-->1512-->4456-->3505-->3444-->1054-->1640-->2113-->2224-->503-->3311-->325-->3678-->4046-->1763-->3486-->2412-->3402-->1340-->1303-->3674-->2030

Max Bandwidth Value :: 7295


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.12 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 4)
Source Vertex = 4179
Destination Vertex = 3269

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 4179-->4657-->3127-->3972-->246-->1415-->4379-->717-->2575-->3264-->2867-->799-->1693-->2005-->3924-->4220-->3031-->2761-->1913-->4094-->1144-->103-->2019-->1771-->264-->1298-->846-->3515-->1630-->2485-->681-->605-->2833-->3556-->1430-->2697-->682-->2224-->503-->3311-->325-->3678-->4046-->1763-->3486-->2412-->3402-->1340-->1162-->2206-->732-->4029-->3037-->1149-->3842-->1761-->3246-->3434-->1619-->974-->3589-->254-->1291-->3493-->3098-->207-->915-->4524-->1790-->1973-->4653-->1981-->1049-->4733-->1344-->2362-->4621-->897-->2322-->832-->2905-->3244-->2401-->4885-->43-->3269

Max Bandwidth Value :: 6638

Running time : 0.28 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 4179-->4657-->3127-->3972-->246-->1415-->4379-->717-->2575-->3264-->2867-->3396-->3066-->2221-->2566-->4924-->3817-->4816-->3702-->2035-->424-->3536-->215-->3776-->1185-->4018-->3791-->1484-->1039-->875-->4189-->4295-->4981-->1619-->974-->3589-->254-->1291-->3493-->3098-->207-->915-->4524-->1790-->1973-->4653-->1981-->1049-->4733-->1344-->2362-->4621-->897-->2322-->832-->2905-->3244-->2401-->4885-->43-->3269

Max Bandwidth Value :: 6638


Running time : 0.08 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 4179-->4657-->3127-->3972-->246-->1415-->4379-->717-->2575-->3264-->2867-->3396-->3908-->3230-->4929-->1936-->3105-->1473-->3326-->4940-->4487-->4995-->3891-->3098-->207-->915-->4524-->1790-->1973-->4653-->1981-->1049-->4733-->1344-->2362-->4621-->897-->2322-->832-->2905-->3244-->2401-->4885-->43-->3269

Max Bandwidth Value :: 6638


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.03 seconds
Total Running time : 0.12 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 5)
Source Vertex = 3497
Destination Vertex = 468

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 3497-->2299-->4305-->1918-->4240-->4330-->3703-->3901-->1850-->1469-->1749-->2415-->2583-->2995-->1771-->264-->1298-->846-->3515-->1630-->2485-->681-->605-->2833-->3556-->1430-->2697-->682-->2224-->2113-->1640-->1054-->3444-->3505-->4456-->1512-->3087-->2808-->2372-->451-->3988-->1187-->2301-->4313-->2563-->1337-->918-->2744-->4480-->4195-->2985-->468

Max Bandwidth Value :: 7568

Running time : 0.29 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 3497-->2299-->4305-->1918-->4240-->4330-->4033-->4877-->2760-->3100-->2962-->4960-->2352-->451-->3988-->859-->4202-->898-->4819-->3417-->4051-->4406-->4970-->2717-->4274-->548-->1152-->3473-->1151-->3255-->3443-->1136-->566-->3711-->3947-->1337-->918-->2744-->4480-->4195-->2985-->468

Max Bandwidth Value :: 7568


Running time : 0.08 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 3497-->2299-->4305-->1918-->4240-->4330-->4033-->4877-->2760-->3100-->2962-->4960-->2352-->451-->3988-->1187-->2301-->4313-->2563-->1337-->918-->2744-->4480-->4195-->2985-->468

Max Bandwidth Value :: 7568


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 6)
Source Vertex = 2507
Destination Vertex = 4214

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 2507-->899-->2446-->4195-->4480-->2744-->918-->1337-->2563-->4313-->2301-->1187-->3988-->859-->4202-->898-->4819-->1831-->3897-->1426-->4386-->2022-->4629-->114-->4116-->2258-->1102-->404-->4214

Max Bandwidth Value :: 7512

Running time : 0.36 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 2507-->899-->2446-->4195-->4480-->2744-->918-->1337-->2563-->4313-->2301-->1187-->3988-->859-->4202-->898-->4819-->1831-->3897-->1426-->4386-->2022-->4629-->114-->4116-->2258-->1102-->404-->4214

Max Bandwidth Value :: 7512


Running time : 0.08 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 2507-->899-->2446-->4195-->4480-->2744-->918-->1337-->2563-->4313-->2301-->1187-->3988-->859-->4202-->898-->4819-->1831-->3897-->1426-->4386-->2022-->4629-->114-->4116-->2258-->1102-->404-->4214

Max Bandwidth Value :: 7512


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.03 seconds
Total Running time : 0.14 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 7)
Source Vertex = 1188
Destination Vertex = 3947

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 1188-->4328-->150-->4645-->1215-->4612-->4080-->2835-->4409-->3290-->3630-->559-->915-->207-->3098-->3493-->1291-->254-->3589-->974-->1619-->4074-->1258-->2316-->875-->1039-->1484-->3791-->4018-->3505-->4456-->1512-->3087-->2808-->2372-->451-->3988-->1187-->2301-->4313-->2563-->1337-->3947

Max Bandwidth Value :: 7753

Running time : 0.31 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 1188-->4328-->150-->4645-->3315-->1001-->4796-->3417-->4051-->4406-->4970-->2717-->4274-->548-->1152-->3473-->1151-->3255-->3443-->1136-->566-->3711-->3947

Max Bandwidth Value :: 7753


Running time : 0.07 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 1188-->4328-->150-->4645-->3315-->1001-->4796-->3417-->4819-->898-->4202-->859-->3988-->1187-->2301-->4313-->2563-->1337-->3947

Max Bandwidth Value :: 7753


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.03 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 8)
Source Vertex = 2564
Destination Vertex = 629

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 2564-->1299-->4914-->2742-->2469-->2491-->1899-->4706-->3549-->3827-->535-->600-->3429-->197-->2213-->1595-->1097-->278-->2392-->962-->150-->4645-->1215-->4612-->4080-->2835-->4409-->3290-->3630-->559-->915-->207-->3098-->3493-->1291-->254-->3589-->974-->1619-->4074-->1258-->2316-->875-->1039-->1484-->3791-->4018-->3505-->3444-->1054-->1640-->2113-->2224-->682-->2697-->1430-->3556-->2833-->605-->681-->2485-->1630-->3515-->846-->1298-->264-->1771-->2995-->2583-->2572-->1357-->2476-->1757-->752-->2997-->363-->2612-->2605-->817-->3212-->1154-->3167-->1534-->2824-->1498-->2934-->982-->3551-->3188-->4155-->1008-->2340-->3642-->3489-->59-->4039-->257-->488-->2656-->3418-->629

Max Bandwidth Value :: 7245

Running time : 0.29 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 2564-->1299-->4914-->2742-->2469-->2491-->1899-->4706-->4090-->1043-->2647-->2771-->225-->3420-->4259-->1521-->251-->2962-->4960-->2352-->451-->3988-->1187-->2301-->3762-->3918-->4805-->3079-->865-->3518-->124-->2924-->4516-->3310-->1537-->2948-->3514-->4563-->2606-->3834-->3361-->4110-->68-->1514-->1035-->2354-->3105-->1473-->3326-->4940-->4487-->4771-->3642-->3489-->59-->4039-->257-->488-->2656-->3418-->629

Max Bandwidth Value :: 7245


Running time : 0.06 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 2564-->1299-->4914-->2742-->2469-->2491-->1899-->4706-->4090-->1043-->2647-->2771-->225-->3420-->4259-->1521-->251-->2962-->4960-->2352-->451-->3988-->859-->4202-->898-->4819-->3417-->4796-->1001-->3315-->4645-->1215-->4612-->4080-->2835-->4409-->3290-->3630-->559-->915-->207-->3098-->3891-->4995-->4487-->4771-->3642-->3489-->59-->4039-->257-->488-->2656-->3418-->629

Max Bandwidth Value :: 7245


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.14 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 9)
Source Vertex = 4038
Destination Vertex = 2432

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 4038-->1608-->3596-->883-->4486-->3429-->197-->2213-->1595-->1097-->278-->2392-->962-->150-->4645-->1215-->4612-->4080-->2835-->4409-->3290-->3630-->559-->915-->207-->3098-->3493-->1291-->254-->3589-->974-->1619-->3434-->3246-->1761-->3842-->1149-->3037-->4029-->732-->2206-->1162-->1340-->3402-->2412-->3486-->1763-->4046-->3678-->325-->3311-->503-->2224-->682-->2697-->1430-->3556-->2833-->605-->681-->2485-->1630-->3515-->846-->1298-->264-->1771-->2995-->2583-->2572-->867-->1183-->4172-->1934-->1896-->2852-->3990-->274-->3544-->1816-->2764-->4031-->209-->297-->186-->1883-->1728-->1864-->2881-->194-->891-->2432

Max Bandwidth Value :: 7035

Running time : 0.3 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 4038-->1608-->3596-->883-->4486-->3429-->197-->2213-->1595-->1097-->278-->2392-->962-->150-->4645-->3315-->1001-->4796-->4164-->1174-->3779-->1035-->2354-->3105-->1936-->4929-->3230-->3908-->497-->1682-->1390-->1256-->888-->3569-->1977-->513-->469-->2220-->4900-->3036-->4875-->4100-->4688-->1801-->194-->891-->2432

Max Bandwidth Value :: 7035


Running time : 0.06 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 4038-->1608-->3596-->883-->4486-->3429-->197-->2213-->1595-->1097-->278-->2392-->962-->150-->4645-->1215-->4612-->4080-->2835-->4409-->3290-->3630-->559-->915-->207-->3098-->3891-->4995-->4487-->4940-->3326-->1473-->3105-->1936-->4929-->3230-->3908-->497-->1682-->1390-->1256-->888-->3569-->1977-->513-->469-->2220-->4900-->3036-->4875-->4100-->4688-->1801-->194-->891-->2432

Max Bandwidth Value :: 7035


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.02 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------



==========================================================
==========================================================
Generating new source-destination pairs! (Iteration : 10)
Source Vertex = 836
Destination Vertex = 1476

Calculating Maximum Bandwidth Path Using Dijkstra's Method without heap
=======================================================================
Max Bandwidth Path  :: 836-->422-->2847-->2370-->60-->4254-->1760-->1106-->2170-->4812-->2870-->2963-->2834-->1831-->4819-->898-->4202-->859-->3988-->451-->2372-->2808-->3087-->1512-->4456-->3505-->3444-->1054-->1640-->2113-->2224-->682-->2697-->1430-->557-->2669-->326-->2607-->2864-->4218-->2012-->4457-->2242-->580-->2761-->1913-->4094-->1144-->103-->2019-->1771-->2995-->2583-->2572-->1357-->2476-->1757-->752-->2997-->363-->2612-->2605-->817-->3212-->1154-->3167-->1534-->2824-->3782-->1517-->3634-->3627-->4336-->3423-->426-->1207-->2115-->1079-->4106-->240-->4926-->269-->485-->2547-->742-->2291-->4005-->2821-->3745-->1289-->3215-->3147-->387-->2281-->4192-->3221-->2556-->4963-->450-->772-->2411-->4973-->2253-->2545-->4776-->470-->4042-->4507-->1476

Max Bandwidth Value :: 7428

Running time : 0.27 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Dijkstra's Method with heap
====================================================================
Max Bandwidth Path  :: 836-->422-->2847-->2370-->60-->4254-->1760-->1106-->2170-->4812-->2870-->2963-->2834-->1831-->4819-->898-->4202-->859-->3988-->451-->2372-->2808-->3087-->1512-->4456-->3505-->4018-->3791-->1484-->1039-->875-->2316-->1258-->4074-->1619-->974-->3589-->254-->1291-->3493-->3098-->3891-->4995-->4487-->4771-->3642-->2340-->1008-->4155-->3188-->3551-->982-->2934-->1498-->2824-->3782-->1517-->3634-->3627-->4336-->3423-->426-->1207-->2115-->1079-->4106-->240-->4926-->269-->485-->2547-->742-->2291-->4005-->2821-->3745-->1289-->3215-->3147-->387-->2281-->4192-->3221-->2556-->4963-->450-->772-->2411-->4973-->2253-->2545-->4776-->470-->4042-->4507-->1476

Max Bandwidth Value :: 7428


Running time : 0.05 seconds
---------------------------------------------------------------------------


Calculating Maximum Bandwidth Path Using Kruskal's Method
=========================================================
Max Bandwidth Path  :: 836-->422-->2847-->2370-->60-->4254-->1760-->1106-->2170-->4812-->2870-->2963-->2834-->1831-->4819-->3417-->4796-->1001-->3315-->4645-->1215-->4612-->4080-->2835-->4409-->3290-->3630-->559-->915-->207-->3098-->3891-->4995-->4487-->4771-->3642-->2340-->1008-->4155-->3188-->3551-->982-->2934-->1498-->2824-->3782-->1517-->3634-->3627-->4336-->3423-->426-->1207-->2115-->1079-->4106-->240-->4926-->269-->485-->2547-->742-->2291-->4005-->2821-->3745-->1289-->3215-->3147-->387-->2281-->4192-->3221-->2556-->4963-->450-->772-->2411-->4973-->2253-->2545-->4776-->470-->4042-->4507-->1476

Max Bandwidth Value :: 7428


Algorithm Running Time (excluding the time for data structure creation and intialization) : 0.03 seconds
Total Running time : 0.13 seconds
---------------------------------------------------------------------------


Program done executing..Press any key to quit!
